import datetime

import requests

from utils.process_created_time import process_created_time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Notion API
NOTION_TOKEN='secret_AbbSZWbyZO8zLqWHAL6WCK2nYRihGYD5kOCZMvUUAT5'
DATABASE_ID="1c8fa05ac45f80c499ecfef705bb0282"
NOTION_HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}


# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def get_clean_rows(start_from: str = None, end_to: str = None, match_id: str = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Notion –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ –∏ ID.

    :param start_from: (str, —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD') ‚Äî —Ñ–∏–ª—å—Ç—Ä: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ >=
    :param end_to: (str, —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD') ‚Äî —Ñ–∏–ª—å—Ç—Ä: –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞ <=
    :param match_id: (str) ‚Äî —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BRN-0012')
    :return: List[dict]
    """
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    response = requests.post(url, headers=NOTION_HEADERS)
    response.raise_for_status()
    raw_results = response.json().get("results", [])

    simplified = []
    for page in raw_results:
        props = page["properties"]
        item = {
            "id": props["User ID"]["title"][0]["text"]["content"] if props["User ID"]["title"] else "",
            "cost": props["Cost"]["number"],
            "kids": props["Kids"]["checkbox"],
            "pets": props["Pets"]["checkbox"],
            "kupel": props["Kupel"]["checkbox"],
            "shooting": props["Shooting"]["checkbox"],  # –ù–æ–≤–æ–µ –ø–æ–ª–µ Shooting
            "phone": props["Phone"]["phone_number"],
            "contact": props["Contact"]["rich_text"][0]["text"]["content"] if props["Contact"]["rich_text"] else "",
            "note": props["Note"]["rich_text"][0]["text"]["content"] if props["Note"]["rich_text"] else "",  # –ù–æ–≤–æ–µ –ø–æ–ª–µ Note
            "start_date": props["Start Date"]["date"]["start"],
            "end_date": props["End Date"]["date"]["start"],
            "payment_method": props["Payment method"]["select"]["name"] if props["Payment method"]["select"] else None
        }

        simplified.append(item)

    # üìÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
    if start_from:
        simplified = [row for row in simplified if row["start_date"] >= start_from]
    if end_to:
        simplified = [row for row in simplified if row["end_date"] <= end_to]

    # üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ID
    if match_id:
        simplified = [row for row in simplified if row["id"] == match_id]

    return simplified


def add_row(data: dict):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É Notion —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π.

    :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É.
    :return: –û—Ç–≤–µ—Ç –æ—Ç API Notion.
    """
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ["id", "phone", "start_date", "end_date"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    for field in required_fields:
        if field not in data:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            return None



    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    url = "https://api.notion.com/v1/pages"
    payload = {
        "parent": {"database_id": DATABASE_ID},
        "properties": {
            "User ID": {
                "title": [{
                    "text": {"content": data["id"]}
                }]
            },
            "Phone": {"phone_number": data["phone"]},
            "Start Date": {"date": {"start": data["start_date"]}},
            "End Date": {"date": {"start": data["end_date"]}},
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
            "Cost": {"number": data.get("cost", 0)},
            "Kids": {"checkbox": bool(data.get("kids", False))},
            "Pets": {"checkbox": bool(data.get("pet", False))},
            "Kupel": {"checkbox": bool(data.get("koupel", False))},
            "Shooting": {"checkbox": bool(data.get("shooting", False))},
            "Contact": {
                "rich_text": [{
                    "text": {"content": data.get("contact", "unknown")}
                }]
            },
            "Payment method": {
                "select": {"name": data.get("payment_method", "Waiting")}
            },
            "Num quests": {
                "select": {"name": str(data.get("num_quests", "1"))}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "1"
            }
        }
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    response = requests.post(url, headers=NOTION_HEADERS, json=payload)
    response.raise_for_status()
    return response.json()


# –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ "Payment method" –ø–æ ID (User ID)
def update_payment_method_by_id(user_id: str, new_method: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ 'Payment method' –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º User ID.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è 'User ID', –∞ –Ω–µ Notion internal id)
    :param new_method: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è 'Payment method' (select)
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    # 1. –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ User ID
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    response = requests.post(url, headers=NOTION_HEADERS)
    response.raise_for_status()
    results = response.json().get("results", [])

    page_id_to_update = None
    for page in results:
        title_data = page["properties"]["User ID"]["title"]
        title_text = title_data[0]["text"]["content"] if title_data else ""
        if title_text == user_id:
            page_id_to_update = page["id"]
            break

    if not page_id_to_update:
        print("‚ùå –°—Ç—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º User ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False

    # 2. –û–±–Ω–æ–≤–∏–º –ø–æ–ª–µ 'Payment method'
    update_url = f"https://api.notion.com/v1/pages/{page_id_to_update}"
    payload = {
        "properties": {
            "Payment method": {
                "select": {"name": new_method}
            }
        }
    }

    update_response = requests.patch(update_url, headers=NOTION_HEADERS, json=payload)
    update_response.raise_for_status()

    print(f"‚úÖ –°—Ç—Ä–æ–∫–∞ —Å User ID '{user_id}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ‚Üí {new_method}")
    return True

def update_payment_method_by_page_id(page_id: str, new_method: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ 'Payment method' –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Notion page ID.

    :param page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, "1cbfa05a-c45f-818c-8051-cf434ddf5996")
    :param new_method: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è 'Payment method' (select)
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    update_url = f"https://api.notion.com/v1/pages/{page_id}"
    payload = {
        "properties": {
            "Payment method": {
                "select": {"name": new_method}
            }
        }
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        response = requests.patch(update_url, headers=NOTION_HEADERS, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP

        print(f"‚úÖ –°—Ç—Ä–æ–∫–∞ —Å page_id '{page_id}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ‚Üí {new_method}")
        return True
    except requests.exceptions.HTTPError as http_err:
        print(f"‚ùå HTTP error occurred: {http_err}")
        print("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", response.text)  # –û—Ç–≤–µ—Ç –æ—Ç API —Å –æ—à–∏–±–∫–æ–π
    except Exception as err:
        print(f"‚ùå Other error occurred: {err}")

    return False


def to_clean_rows(results):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —É–ø—Ä–æ—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ä—Ç–∏—Ä—É—è –∏—Ö –ø–æ start_date.

    :param results: –û—Ç–≤–µ—Ç –æ—Ç Notion —Å –¥–∞–Ω–Ω—ã–º–∏.
    :return: –°–ø–∏—Å–æ–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ start_date.
    """
    simplified = []
    for page in results:
        props = page["properties"]
        print(page["created_time"])
        item = {
            "id": props["User ID"]["title"][0]["text"]["content"] if props["User ID"]["title"] else "",
            "cost": props["Cost"]["number"],
            "kids": props["Kids"]["checkbox"],
            "pets": props["Pets"]["checkbox"],
            "kupel": props["Kupel"]["checkbox"],
            "phone": props["Phone"]["phone_number"],
            "contact": props["Contact"]["rich_text"][0]["text"]["content"] if props["Contact"]["rich_text"] else "",
            "note": props["Note"]["rich_text"][0]["text"]["content"] if props["Note"]["rich_text"] else "",
            "start_date": datetime.datetime.strptime(props["Start Date"]["date"]["start"], "%Y-%m-%d").date(),
            "end_date": datetime.datetime.strptime(props["End Date"]["date"]["start"], "%Y-%m-%d").date(),
            "payment_method": props["Payment method"]["select"]["name"] if props["Payment method"]["select"] else None,
            "created_time": process_created_time(page["created_time"])  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        }
        simplified.append(item)

    simplified.sort(key=lambda x: x["start_date"])

    return simplified


def get_pages_by_user_id(user_id: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º User ID.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è 'User ID', –∞ –Ω–µ Notion internal id)
    :return: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    response = requests.post(url, headers=NOTION_HEADERS)
    response.raise_for_status()

    results = response.json().get("results", [])

    for i in results:
        print(i)

    # 2. –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ User ID
    filtered_pages = [page for page in results if
                      page["properties"]["User ID"]["title"][0]["text"]["content"] == user_id]

    if not filtered_pages:
        print("‚ùå –°—Ç—Ä–æ–∫–∏ —Å —Ç–∞–∫–∏–º User ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return None

    # 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return to_clean_rows(filtered_pages)
