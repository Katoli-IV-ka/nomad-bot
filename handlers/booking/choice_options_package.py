from aiogram import Router, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMedia, InputMediaPhoto

from keyboards.back_to_options_kb import back_to_options_package_kb
from keyboards.options_package_kb import options_package_keyboard
from keyboards.share_contact_kb import share_contact_keyboard
from states.booking_states import BookingState

router = Router()

@router.callback_query(F.data.startswith("package_options|"))
async def package_options(callback: types.CallbackQuery, state: FSMContext):
    _, option, exclusive_flag = callback.data.split("|")
    exclusive = bool(int(exclusive_flag))

    data = await state.get_data()
    package = data.get("package_options", {})

    if option == "film":
        await state.set_state(BookingState.shooting_share_contact)

        # to_msg
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media = "AgACAgIAAxkBAAIBx2frCvjAWpJs91hL7eVhpYTffn0nAAKt9TEb4TZZS56xO9ubLxYIAQADAgADcwADNgQ",
                caption="üé¨ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—ä—ë–º–æ–∫*\n\n"
                        "–ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–º –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏, —Å—ä—ë–º–∫–∏ —Ä–µ–∫–ª–∞–º—ã, —Ñ–∏–ª—å–º–æ–≤ –∏ —Ç.–ø., "
                        "–º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.",
                parse_mode="Markdown",
            ),
            reply_markup=await back_to_options_package_kb(),
        )

        # to_msg
        req_contact_msg = await callback.message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=share_contact_keyboard()
        )

        await state.update_data(req_contact_msg=req_contact_msg)

        return

    if exclusive:
        # —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ–ø—Ü–∏–∏ –∏–∑ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø—ã
        if option == "one_person":
            package["one_person"] = True
            package["two_person"] = False
        elif option == "two_person":
            package["one_person"] = False
            package["two_person"] = True
    else:
        package[option] = not package.get(option, False)

    await state.update_data(package_options=package)

    try:
        await callback.message.edit_reply_markup(reply_markup=options_package_keyboard(package))
    except TelegramBadRequest:
        return



@router.callback_query(F.data == "continue_booking", BookingState.options_package_selection)
async def finish_package_selection(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # to_msg
    package = data.get("package_options", {})
    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"

    mapping = {
        "one_person": "üë§ –î–ª—è –æ–¥–Ω–æ–≥–æ",
        "two_person": "üë• –î–ª—è –¥–≤–æ–∏—Ö",
        "child": "üßí –° —Ä–µ–±—ë–Ω–∫–æ–º",
        "pet": "üê∂ –° –ø–∏—Ç–æ–º—Ü–µ–º",
        "koupel": "üõÅ –ö—É–ø–µ–ª—å",
    }

    for key, label in mapping.items():
        if package.get(key):
            text += f"‚Ä¢ {label}\n"




    # to_msg
    await callback.message.edit_media(
        media = InputMediaPhoto(
            media = "AgACAgIAAxkBAAIBxWfrCu_-GGwWDFMrS_SiRH3tIY0TAAKs9TEb4TZZS3mMFih9kwuEAQADAgADcwADNgQ",
            caption = f"{text}",
        ),
        reply_markup = await back_to_options_package_kb()
    )

    await callback.message.answer(
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=share_contact_keyboard()
    )

    await state.set_state(BookingState.share_contact)
