from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

options_photo = "AgACAgIAAxkBAAIOL2guXZn6_d_npOwoYdhhFooAAZvzEQAD6TEbQ255SYCaRv7znI_OAQADAgADcwADNgQ"

def get_options_text(package: dict) -> str:
    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"

    mapping = {
        "one_person": "üë§ –î–ª—è –æ–¥–Ω–æ–≥–æ",
        "two_person": "üë• –î–ª—è –¥–≤–æ–∏—Ö",
        "child": "üßí –° —Ä–µ–±—ë–Ω–∫–æ–º",
        "pet": "üê∂ –° –ø–∏—Ç–æ–º—Ü–µ–º",
        "koupel": "üõÅ –ö—É–ø–µ–ª—å",
    }

    for key, label in mapping.items():
        if package.get(key):
            text += f"‚Ä¢ {label}\n"

    return text or ""

def get_options_keyboard(data: dict = {}) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()

    def mark(callback_key: str, btn_text: str, exclusive=False):
        active = data.get(callback_key)
        icon = "‚òëÔ∏è" if active else ""
        text = icon + " " + btn_text

        callback = f"package_options|{callback_key}|{int(exclusive)}"
        return {"text": text, "callback_data": callback}

    # –†—è–¥: –¥–ª—è –æ–¥–Ω–æ–≥–æ / –¥–ª—è –¥–≤–æ–∏—Ö (–≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ)
    keyboard.button(**mark("one_person", "–î–ª—è –æ–¥–Ω–æ–≥–æ", exclusive=True))
    keyboard.button(**mark("two_person", "–î–ª—è –¥–≤–æ–∏—Ö", exclusive=True))

    # –†—è–¥: —Ä–µ–±—ë–Ω–æ–∫ / –ø–∏—Ç–æ–º–µ—Ü
    keyboard.button(**mark("child", "–ë—É–¥—É —Å 1 —Ä–µ–±—ë–Ω–∫–æ–º"))
    keyboard.button(**mark("pet", "–ë—É–¥—É —Å –ø–∏—Ç–æ–º—Ü–µ–º"))

    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    keyboard.button(**mark("koupel", "–î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–µ–ª—å"))

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_booking")
    keyboard.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="accept_options")

    keyboard.adjust(2, 2, 1, 2)
    return keyboard.as_markup()


async def to_options_kb() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ù–∞–∑–∞–¥", callback_data="to_options")
    return keyboard.as_markup()
